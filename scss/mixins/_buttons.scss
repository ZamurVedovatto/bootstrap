// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

// scss-docs-start btn-variant-mixin
@mixin button-variant(
  $background,
  $border,
  $color: color-contrast($background),
  $hover-background: darken($background, 5%),
  $hover-border: darken($border, 5%),
  $hover-color: color-contrast($hover-background),
  $active-background: darken($background, 10%),
  $active-border: darken($border, 10%),
  $active-color: color-contrast($active-background),
  $disabled-background: $btn-disabled-background-color,
  $disabled-border: $btn-disabled-border-color,
  $disabled-color: $btn-disabled-color
) {
  color: $color;
  @include gradient-bg($background);
  border-color: $border;
  @include box-shadow($btn-box-shadow);

  &:hover {
    color: $hover-color;
    background: $hover-background;
  }

  .btn-check:focus + &,
  &:focus {
    color: $hover-color;
    @include gradient-bg($hover-background);
    border-color: $white;
    @if $enable-shadows {
      box-shadow: 0 0 0 2px rgba(mix($color, $border, 15%), 1);
    } @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      //box-shadow: 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), .5);
    }
  }

  .btn-check:checked + &,
  .btn-check:active + &,
  &:active,
  &.active,
  .show > &.dropdown-toggle {
    color: $active-color;
    background-color: $active-background;
    // Remove CSS gradients if they're enabled
    background-image: if($enable-gradients, none, null);
    border-color: $white;

    &:focus {
      @if $enable-shadows {
        //@include box-shadow($btn-active-box-shadow, 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), 0));
      } @else {
        // Avoid using mixin so we can pass custom focus shadow properly
        // box-shadow: 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), 0);
      }
    }
  }

  &:disabled,
  &.disabled {
    color: $disabled-color;
    background-color: $disabled-background;
    // Remove CSS gradients if they're enabled
    background-image: if($enable-gradients, none, null);
    border-color: $disabled-border;
  }
}
// scss-docs-end btn-variant-mixin

// scss-docs-start btn-outline-variant-mixin
@mixin button-outline-variant(
  $color,
  $color-hover: color-contrast($color),
  $active-background: $color,
  $active-border: $color,
  $active-color: color-contrast($active-background)
) {
  color: $color;
  border-color: rgba($color, 0.6);
  background: #fff;

  &:hover,
  &:focus {
    color: $active-border;
    border-color: $active-border;
  }

  .btn-check:focus + &,
  &:focus {
    box-shadow: 0 0 0 2px $color, inset 0 0 0 1px $color;
    border-color: #fff;
  }

  .btn-check:checked + &,
  .btn-check:active + &,
  &:active,
  &.active,
  &.dropdown-toggle.show {
    color: $active-border;
    background-color: rgba($active-background, 0.05);
    //border-color: $active-border;

    &:focus {
      @if $enable-shadows {
        //@include box-shadow($btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, 0));
      } @else {
        // Avoid using mixin so we can pass custom focus shadow properly
        //box-shadow: 0 0 0 $btn-focus-width rgba($color, 0);
      }
    }
  }

  &:disabled,
  &.disabled {
    color: $btn-disabled-color;
    background-color: $btn-disabled-background-color;
    border-color: $btn-disabled-border-color;
  }
}
// scss-docs-end btn-outline-variant-mixin

// scss-docs-start btn-size-mixin
@mixin button-size($padding-y, $padding-x, $font-size, $border-radius) {
  padding: $padding-y $padding-x;
  @include font-size($font-size);
  // Manually declare to provide an override to the browser default
  @include border-radius($border-radius, 0);
}

// Override .btn-sm to use 1px border instead of 2px
.btn {
  &.btn-sm {
    border-width: $border-width;
    &:hover {
        border-width: $border-width;
    }
  }
}
// scss-docs-end btn-size-mixin
